#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

struct Item {
    int value;
    int weight;

    Item(int v, int w) : value(v), weight(w) {}
};

bool compare(Item a, Item b) {
    double r1 = (double)a.value / a.weight;
    double r2 = (double)b.value / b.weight;
    return r1 > r2;
}

double fractionalKnapsack(int W, vector<Item>& items) {
    sort(items.begin(), items.end(), compare);
    double totalValue = 0.0;

    for (auto& item : items) {
        if (W >= item.weight) {
            W -= item.weight;
            totalValue += item.value;
        } else {
            totalValue += item.value * ((double)W / item.weight);
            break;
        }
    }
    return totalValue;
}

int main() {
    int n, W;
    cout << "Enter the number of items: ";
    cin >> n;

    vector<Item> items;
    for (int i = 0; i < n; ++i) {
        int value, weight;
        cout << "Enter value and weight of item " << i + 1 << ": ";
        cin >> value >> weight;
        items.emplace_back(value, weight);
    }

    cout << "Enter the capacity of the knapsack: ";
    cin >> W;

    cout << "Maximum value in Knapsack = " << fractionalKnapsack(W, items) << endl;
    return 0;
}





/tmp/ImWHclRgm9.o
Enter the number of items: 5
Enter value and weight of item 1: 20 34
Enter value and weight of item 2: 40 60
Enter value and weight of item 3: 23 67
Enter value and weight of item 4: 46 90
Enter value and weight of item 5: 50 60
Enter the capacity of the knapsack: 50
Maximum value in Knapsack = 41.6667


=== Code Execution Successful ===